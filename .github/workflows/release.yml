name: Create Release

on: 
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Pull latest changes
      run: git pull origin main

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: https://registry.npmjs.org
        cache: pnpm

    - name: Calculate version
      id: calculate_version
      run: |
        RUN_NUMBER=${{ github.run_number }}
        MAJOR=$(( RUN_NUMBER / 100 ))
        MINOR=$(( (RUN_NUMBER % 100) / 10 ))
        PATCH=$(( RUN_NUMBER % 10 ))
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT

    - name: Update Package.json Version
      run: |
        NEW_PACKAGE_VERSION="${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }}"
        jq '.version = "'"$NEW_PACKAGE_VERSION"'"' package.json > package.json.tmp && mv package.json.tmp package.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install & Build
      run: |
        pnpm i --frozen-lockfile
        pnpm build

    - name: Create release zip
      run: pnpm run zip-dist

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }}
        name: Release v${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }}
        draft: false
        prerelease: false
        files: |
          release.zip

    - name: Update README with release version
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        sed -i "s|<VERSION_PLACEHOLDER>|v${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }}|g" README.md
        NEW_PACKAGE_VERSION="${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }}"
        # Use jq to update the version field in package.json
        # Requires jq to be installed on the runner, which is usually available on GitHub-hosted runners.
        jq '.version = "'"$NEW_PACKAGE_VERSION"'"' package.json > package.json.tmp && mv package.json.tmp package.json
        git add README.md package.json
        git commit -m "Docs: Update README and package.json with release version v${{ steps.calculate_version.outputs.major }}.${{ steps.calculate_version.outputs.minor }}.${{ steps.calculate_version.outputs.patch }} [skip ci]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 